# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
    
    # Publish semver tags as releases.
    tags: [ 'v*' ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true
      
    - uses: ./.github/actions/prepare
  
    - name: Build
      run: dotnet build --configuration Release --no-restore /p:EnableWindowsTargeting=true /p:Version=${{ env.VERSION }} /p:FileVersion=${{ env.FILE_VERSION }} /p:AssemblyVersion=${{ env.FILE_VERSION }}
      
    - name: Test
      run: dotnet test --no-restore --verbosity normal

    - name: Build hash for use in build process
      shell: bash
      run: |
          dotnet publish FileHasher.CLI.Hash/FileHasher.CLI.Hash.csproj \
              --configuration Release \
              -p:Version=${{ env.VERSION }} \
              -p:FileVersion=${{ env.FILE_VERSION }} \
              -p:AssemblyVersion=${{ env.FILE_VERSION }} \
              -p:EnableWindowsTargeting=true \
              -p:PublishTrimmed=false \
              --output hash/

    - uses: actions/upload-artifact@v4
      name: Upload hash tool
      with:
        name: hash
        path: hash/
        retention-days: 7
  
  build:
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: true

    strategy:
      matrix:
        runtime: [win-x86, win-x64, win-arm64, linux-x64, linux-arm, linux-arm64, osx-x64, osx-arm64]
        build_variant: [self-contained, full]
        include:
         - runtime: win-x86
           build_variant: gui
         - runtime: win-x86
           build_variant: full-gui
         - runtime: win-x64
           build_variant: gui
         - runtime: win-x64
           build_variant: full-gui
         - runtime: win-arm64
           build_variant: gui
         - runtime: win-arm64
           build_variant: full-gui
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true
      
    - uses: ./.github/actions/prepare
  
    - name: Download hash tool
      uses: actions/download-artifact@v4
      with:
        name: hash
        path: ./hash

    - name: make hash tool executable
      run: chmod +x ./hash/hash
      
    - name: Prepare output directory
      run: mkdir output
      

    - name: Publish
      uses: ./.github/actions/publish-executables-for-platform
      with:
        runtime: ${{ matrix.runtime }}
        remove_pdb_files: ${{ startsWith(github.ref, 'refs/tags/') && 'true' || 'false' }}
        output_directory: ${{ matrix.runtime }}${{ matrix.build_variant == 'self-contained' && '' || format('-{0}', matrix.build_variant) }}
        full_build: ${{ matrix.build_variant == 'full' || matrix.build_variant == 'full-gui' && 'true' || 'false' }}
        build_gui: ${{ matrix.build_variant == 'gui' && 'only' || matrix.build_variant == 'full-gui' && 'true' || 'false' }}
  
  release:
    needs: build   
    runs-on: ubuntu-latest 
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./output

    - name: Delete hash tool from output
      run: rm -rf ./output/hash

    - name: Zip published files
      working-directory: ./output/
      run: for i in *; do [ -d "$i" ] && zip --recurse-paths --move --test "${i%/}.zip" "$i"; done
        
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: output/*.zip
